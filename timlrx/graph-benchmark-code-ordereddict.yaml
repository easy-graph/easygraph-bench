!!python/object/apply:collections.OrderedDict
- - - graphtool
    - !!python/object/apply:collections.OrderedDict
      - - - loading
          - '''''''load_graph_from_csv(filename, directed=True, csv_options={''delimiter'':
            ''\t'', ''quotechar'': ''"''})'''''''
        - - loading_undirected
          - '''''''load_graph_from_csv(filename, directed=False, csv_options={''delimiter'':
            ''\t'', ''quotechar'': ''"''})'''''''
        - - 2-hops
          - '"shortest_distance(g, g.vertex(0), max_dist=2).a"'
        - - shortest path
          - '"shortest_distance(g, g.vertex(0)).a"'
        - - page rank
          - "'pagerank(g, damping=0.85, epsilon=1e-3, max_iter=10000000).a'"
        - - k-core
          - "'kcore_decomposition(g).a'"
        - - strongly connected components
          - "'cc, _ = label_components(g, vprop=None, directed=True, attractors=False);
            cc.a'"
  - - igraph
    - !!python/object/apply:collections.OrderedDict
      - - - loading
          - '"Graph.Read(filename, format=''edges'')"'
        - - loading_undirected
          - '"Graph.Read(filename, format=''edges'', directed=False)"'
        - - shortest path
          - '"g.distances(source=[g.vs[0]], weights=[1]*len(g.es), )"'
        - - page rank
          - '"g.pagerank(damping=0.85)"'
        - - betweenness centrality
          - '"g.betweenness()"'
        - - closeness centrality
          - '"g.closeness()"'
        - - k-core
          - '"g.coreness(mode=''all'')"'
        - - strongly connected components
          - '"[i for i in g.components(mode=STRONG)]"'
  - - networkit
    - !!python/object/apply:collections.OrderedDict
      - - - loading
          - '"nk.graphio.EdgeListReader(separator=''\t'', firstNode=0, continuous=True,
            directed =True).read(filename)"'
        - - loading_undirected
          - '"nk.graphio.EdgeListReader(separator=''\t'', firstNode=0, continuous=True).read(filename)"'
        - - shortest path
          - '"nk.distance.BFS(g, 0, storePaths=False).run().getDistances(False)"'
        - - page rank
          - '"nk.centrality.PageRank(g, damp=0.85, tol=1e-3).run().scores()"'
        - - strongly connected components
          - '"nk.components.StronglyConnectedComponents(g).run().getPartition().getVector()"'
        - - k-core
          - '"nk.centrality.CoreDecomposition(g).run().scores()"'
  - - networkx
    - !!python/object/apply:collections.OrderedDict
      - - - loading
          - '''read_edgelist(filename, delimiter="\t", nodetype=int, create_using=nx.DiGraph())'''
        - - loading_undirected
          - '''read_edgelist(filename, delimiter="\t", nodetype=int, create_using=nx.Graph())'''
        - - 2-hops
          - f'single_source_shortest_path_length(g, {nodeid}, cutoff=2)'
        - - shortest path
          - f'shortest_path_length(g, {nodeid})'
        - - page rank
          - "'pagerank(g, alpha=0.85, tol=1e-3, max_iter=10000000)'"
        - - strongly connected components
          - "'[i for i in strongly_connected_components(g)]'"
        - - connected components
          - "'[i for i in connected_components(g)]'"
        - - k-core
          - "'core.core_number(g)'"
  - - snap
    - !!python/object/apply:collections.OrderedDict
      - - - loading
          - '"snap.LoadEdgeListStr(snap.PNGraph, filename, 0, 1)"'
        - - 2-hops
          - '"snap.GetNodesAtHop(g, 0, 2, NodeVec, True)"'
        - - shortest path
          - '"snap.GetShortPath(g, 0, NIdToDistH, True)"'
        - - page rank
          - '"snap.GetPageRank(g, PRankH, 0.85, 1e-3, 10000000)"'
        - - k-core
          - '"snap.GetKCoreNodes(g, CoreIDSzV)"'
        - - strongly connected components
          - '"snap.GetSccs(g, Components)"'
  - - easygraph
    - !!python/object/apply:collections.OrderedDict
      - - - loading
          - '''read_edgelist(filename, delimiter="\t", nodetype=int, create_using=eg.DiGraph()).cpp()'''
        - - loading_undirected
          - '''read_edgelist(filename, delimiter="\t", nodetype=int, create_using=eg.Graph()).cpp()'''
        - - shortest path
          - f'Dijkstra(g, {nodeid})'
        - - page rank
          - "'pagerank(g)'"
        - - betweenness centrality
          - "'betweenness_centrality(g)'"
        - - closeness centrality
          - "'closeness_centrality(g)'"
        - - strongly connected components
          - "'[i for i in strongly_connected_components(g)]'"
        - - connected components
          - "'[i for i in connected_components(g)]'"
        - - connected components directed
          - "'[i for i in connected_components_directed(g)]'"
        - - k-core
          - "'k_core(g)'"
